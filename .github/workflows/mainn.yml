name: Cl

on: 
  [push, workflow_dispatch]  # Trigger on push or manual workflow dispatch

jobs:
  build:
    runs-on: windows-latest  # Use the latest Windows runner provided by GitHub Actions

    steps:
    # Step 1: Download ngrok
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    # Step 2: Extract the ngrok ZIP file
    - name: Extract ngrok
      run: Expand-Archive ngrok.zip -DestinationPath .\ngrok

    # Step 3: Authenticate ngrok with your ngrok account
    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}  # Ensure that NGROK_AUTH_TOKEN is added in GitHub Secrets

    # Step 4: Enable Remote Desktop Protocol (RDP) on the machine
    - name: Enable Remote Desktop (TS)
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0

    # Step 5: Allow RDP through the firewall
    - name: Allow RDP through firewall
      run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

    # Step 6: Enable User Authentication for RDP
    - name: Enable User Authentication for RDP
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    # Step 7: Set the password for the runneradmin user
    - name: Set password for runneradmin user
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    # Step 8: Start ngrok TCP tunnel for RDP (Port 3389)
    - name: Create ngrok tunnel for RDP
      run: .\ngrok\ngrok.exe tcp 3389

    # Optional: Debug - list files in the ngrok folder to verify extraction
    - name: List ngrok folder contents (debug)
      run: Get-ChildItem .\ngrok

    # Optional: Check ngrok version (debug)
    - name: Check ngrok version (debug)
      run: .\ngrok\ngrok.exe version
